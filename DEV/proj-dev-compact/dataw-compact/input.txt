Aula 04: Computação Paralela Vs. Computação Distribuída
Por Wanfranklin C. M. Alves - Linkedin - GitHub

Objetivo da Aula

Esta aula tem como objetivo introduzir os conceitos de computação paralela e computação distribuída, destacando suas diferenças, vantagens e desvantagens. 

Introdução

	A computação paralela e distribuída são abordagens utilizadas para melhorar o desempenho e a escalabilidade em sistemas computacionais. Ambas envolvem a execução simultânea de tarefas, mas diferem em como essas tarefas são distribuídas entre os processadores ou dispositivos.

1. Definições

Computação Paralela: Refere-se à execução simultânea de várias tarefas em múltiplos processadores ou núcleos de processamento dentro de um único sistema.
Computação Distribuída: Envolve a distribuição de tarefas em vários computadores interconectados em uma rede, trabalhando juntos para realizar uma operação.

2. Exemplos em .NET

Exemplo 1: Computação Paralela

using System;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        Parallel.For(0, 10, i =>
        {
            Console.WriteLine($"Thread {i} executando.");
        });
    }
}

Neste exemplo, a classe Parallel do .NET é utilizada para executar um loop for de forma paralela, distribuindo as iterações entre vários threads.

Exemplo 2: Computação Paralela com PLINQ (Parallel LINQ)

using System;
using System.Linq;

class Program
{
    static void Main()
    {
        var numeros = Enumerable.Range(1, 1000000);
        var pares = numeros.AsParallel().Where(n => n % 2 == 0).ToArray();
        Console.WriteLine($"Quantidade de números pares: {pares.Length}");
    }
}

Neste exemplo, a consulta LINQ é executada de forma paralela usando o método AsParallel(), que distribui a operação em várias threads para processamento mais rápido.

Exemplo 3: Computação Paralela com Processos em .NET

using System;
using System.Diagnostics;

class Program
{
    static void Main()
    {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        startInfo.FileName = "notepad.exe";
        Process.Start(startInfo);
        Console.WriteLine("O Bloco de Notas foi iniciado em um processo separado.");
    }
}

Exemplo 4: Comparando Processos em .NET

using System;
using System.Diagnostics;

class Program
{
    static void Main()
    {
        Action<string> verificarAbertura = programa =>
        {
            Process[] processos = Process.GetProcessesByName(programa);
            if (processos.Length > 0)
            {
                Console.WriteLine($"{programa} está aberto.");
            }
            else
            {
                Console.WriteLine($"{programa} não está aberto.");
            }
        };

        verificarAbertura("chrome");
        verificarAbertura("notepad");
    }
}
